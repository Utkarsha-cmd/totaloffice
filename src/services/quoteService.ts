import axios from 'axios';
import { authService } from './authService';

// Extend the Window interface to include ENV
declare global {
  interface Window {
    ENV?: {
      NEXT_PUBLIC_API_URL?: string;
    };
  }
}

const { getAuthToken } = authService;

// Use environment variable if available, otherwise use default local URL
const API_URL = (typeof window === 'undefined' 
  ? (process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api')
  : (window.ENV?.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api'
));

// Create axios instance with base URL and headers
const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
  withCredentials: true,
});

// Request interceptor to add auth token
api.interceptors.request.use(
  (config) => {
    const token = getAuthToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor to handle errors
api.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error('API Error:', error);
    
    if (error.response) {
      // Handle different HTTP error statuses
      const { status, data } = error.response;
      console.error('API Error Response:', { status, data });
      
      // If unauthorized, clear the token and redirect to login
      if (status === 401) {
        console.error('Authentication failed, redirecting to login...');
        // Clear any stored user data
        localStorage.removeItem('user');
        // Redirect to login page
        window.location.href = '/login';
      }
      if (status === 401) {
        // Handle unauthorized access (e.g., redirect to login)
        console.error('Unauthorized access - please login again');
      } else if (status === 403) {
        console.error('Forbidden - you do not have permission to access this resource');
      } else if (status === 404) {
        console.error('Resource not found');
      } else if (status >= 500) {
        console.error('Server error - please try again later');
      }
    } else if (error.request) {
      // The request was made but no response was received
      console.error('No response from server - please check your connection');
    } else {
      // Something happened in setting up the request
      console.error('Request error:', error.message);
    }
    return Promise.reject(error);
  }
);

// Quote types
export interface LineItem {
  id?: string;
  description: string;
  quantity: number;
  unitPrice: number;
  total: number;
}

export interface Quote {
  _id?: string;
  id?: string;
  customerId: string;
  customerName: string;
  quoteNumber: string;
  date: string | Date;
  expiryDate: string | Date;
  lineItems: LineItem[];
  subtotal: number;
  taxRate: number;
  taxAmount: number;
  total: number;
  terms: string;
  notes: string;
  status: 'draft' | 'sent' | 'accepted' | 'rejected' | 'expired';
  createdBy?: string;
  updatedAt?: string | Date;
}

// API Service functions
export const quoteService = {
  // Create a new quote
  createQuote: async (quoteData: Omit<Quote, 'id' | 'quoteNumber' | 'status' | 'createdAt'>): Promise<Quote> => {
    try {
      // Add an empty quoteNumber which will be auto-generated by the backend
      const response = await api.post('/quotes', {
        ...quoteData,
        quoteNumber: '', // This will trigger the pre-save hook in the backend
        status: 'draft' // Ensure status is set
      });
      return response.data;
    } catch (error) {
      console.error('Error creating quote:', error);
      throw error;
    }
  },

  // Get all quotes with optional filters
  getQuotes: async (filters?: {
    status?: string;
    customerId?: string;
    startDate?: string;
    endDate?: string;
  }): Promise<Quote[]> => {
    try {
      const response = await api.get('/quotes', { params: filters });
      return response.data;
    } catch (error) {
      console.error('Error fetching quotes:', error);
      throw error;
    }
  },

  // Get a single quote by ID
  getQuote: async (id: string): Promise<Quote> => {
    try {
      const response = await api.get(`/quotes/${id}`);
      return response.data;
    } catch (error) {
      console.error(`Error fetching quote ${id}:`, error);
      throw error;
    }
  },

  // Update a quote
  updateQuote: async (
    id: string,
    updateData: Partial<Omit<Quote, 'id' | 'quoteNumber' | 'createdAt'>>
  ): Promise<Quote> => {
    try {
      const response = await api.put(`/quotes/${id}`, updateData);
      return response.data;
    } catch (error) {
      console.error(`Error updating quote ${id}:`, error);
      throw error;
    }
  },

  // Delete a quote
  deleteQuote: async (id: string): Promise<void> => {
    try {
      await api.delete(`/quotes/${id}`);
    } catch (error) {
      console.error(`Error deleting quote ${id}:`, error);
      throw error;
    }
  },

  // Update quote status
  updateQuoteStatus: async (
    id: string,
    status: 'draft' | 'sent' | 'accepted' | 'rejected' | 'expired'
  ): Promise<Quote> => {
    try {
      const response = await api.put(`/quotes/${id}/status`, { status });
      return response.data;
    } catch (error) {
      console.error(`Error updating status for quote ${id}:`, error);
      throw error;
    }
  },

  // Convert quote to order
  convertToOrder: async (quoteId: string): Promise<any> => {
    try {
      const response = await api.post(`/quotes/${quoteId}/convert-to-order`);
      return response.data;
    } catch (error) {
      console.error(`Error converting quote ${quoteId} to order:`, error);
      throw error;
    }
  },

  // Calculate quote totals
  calculateTotals: (lineItems: LineItem[], taxRate: number) => {
    const subtotal = lineItems.reduce((sum, item) => sum + item.total, 0);
    const taxAmount = subtotal * (taxRate / 100);
    const total = subtotal + taxAmount;

    return {
      subtotal: parseFloat(subtotal.toFixed(2)),
      taxAmount: parseFloat(taxAmount.toFixed(2)),
      total: parseFloat(total.toFixed(2)),
    };
  },

  // Format date for display
  formatDate: (dateString: string | Date): string => {
    const options: Intl.DateTimeFormatOptions = {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    };
    return new Date(dateString).toLocaleDateString(undefined, options);
  },

  // Format currency
  formatCurrency: (amount: number): string => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
    }).format(amount);
  },
};

export default quoteService;
